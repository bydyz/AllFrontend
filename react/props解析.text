react中，

class NewComponent extends PureComponent {
  constructor(props) {
    super(props)

    this.state = {
      userInfo: {
        name: "coderwhy",
        level: 99
      }
    }
  }

  render() {
    return <OriginComponent {...this.props} {...this.state.userInfo}/>
  }
}

props是什么，为啥要写super(props)，详解？


在 React 中，props 是组件的属性对象，用于传递数据给组件。在类组件中，props 通过构造函数的参数传递给组件，然后通过 this.props 来访问。

在类组件的构造函数中，需要调用 super(props)，这是因为在 JavaScript 中，如果在子类中定义了构造函数，那么子类的构造函数必须调用 super() 方法，以调用父类的构造函数，并且传入当前的 props 对象。这是因为 React 中的类组件继承自 React.Component，而 React.Component 的构造函数需要接收 props 对象作为参数。

所以，在以上代码中，super(props) 的作用是将 props 对象传递给父类的构造函数，以确保在子类中能够正确地使用 this.props 来访问传入的属性。
























super(props)似乎并不是必须写的，请详解？

在较早的 JavaScript 版本中，确实不是必须的。在 JavaScript 的 ES5 版本中，如果子类的构造函数没有明确调用 super()，JavaScript 引擎会自动调用父类的构造函数，并将当前的 this 作为参数传递给父类的构造函数。因此，即使子类的构造函数中没有显式调用 super(props)，父类的构造函数也会被调用，并且传入的参数是子类的 props 对象。

然而，在现代的 JavaScript 语法中，特别是在使用类属性初始化器语法（Class Property Initializer Syntax）时，如果子类需要访问 this.props，那么必须在构造函数中调用 super(props)，以确保 this.props 在构造函数中正确地被绑定到父类传递的 props 对象上。

总的来说，在 React 中，如果子类的构造函数不需要进行其他操作，也不需要在构造函数中初始化 state，那么可以省略构造函数，这时 super(props) 也就不再需要了。但是如果构造函数中需要做其他初始化操作，或者需要访问 this.props，则应该显式地调用 super(props)。