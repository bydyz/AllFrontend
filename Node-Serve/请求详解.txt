前端发送一个 HTTP 请求给后端时，这个请求由几个关键部分组成，它们共同构成了 HTTP 请求的格式：


请求行（Request Line）:

方法（Method）: 如 GET、POST、PUT、DELETE 等，指定了要对资源执行的操作。
请求 URI（Request URI）: 请求的资源的路径，通常包括主机名和路径。
HTTP 版本: 指定使用的 HTTP 协议的版本。
示例:

GET /path/to/resource?query=string HTTP/1.1



请求头（Request Headers）:
请求头提供了关于请求的元数据，包括但不限于：

Host: 请求的主机名。
User-Agent: 发送请求的客户端信息。
Accept: 客户端能够处理的 MIME 类型。
Content-Type: 请求体的 MIME 类型。
Content-Length: 请求体的长度。
Authorization: 认证信息，如令牌或基本认证。
Cookie: 存储在客户端的 cookies。
示例:

Host: www.example.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Content-Type: application/json
Content-Length: 55
Authorization: Bearer your-token-here
Cookie: session_id=abc123; theme=dark



空行:
请求头和请求体之间的分隔符，它是一个额外的 CRLF（\r\n）。




请求体（Request Body）:

在 GET 或 HEAD 请求中通常不存在。
在 POST、PUT 或 PATCH 请求中常见，包含了发送给服务器的数据。这个数据可以是表单数据、JSON、XML 或其他格式，具体取决于 Content-Type 头部。
示例:

{
  "username": "johndoe",
  "password": "secret"
}



协议结束符:
在 HTTP 请求的末尾，通常是一个空行（CRLF），表示请求结束。




一个完整的 HTTP 请求示例可能如下所示：

GET /path/to/resource?query=string HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Content-Type: application/json
Content-Length: 0


在实际的 HTTP 通信中，这些部分通过客户端（如浏览器）和服务器之间的 TCP 连接传输。服务器接收到请求后，会解析请求行、请求头和请求体（如果存在），然后根据请求的资源和方法来生成一个 HTTP 响应。