// ◼ 文件描述符（File descriptors）是什么呢？
//    在常见的操作系统上，对于每个进程，内核都维护着一张当前打开着的文件和资源的表格。
//    每个打开的文件都分配了一个称为文件描述符的简单的数字标识符。
//    在系统层，所有文件系统操作都使用这些文件描述符来标识和跟踪每个特定的文件。
//    Windows 系统使用了一个虽然不同但概念上类似的机制来跟踪资源。

// ◼ 为了简化用户的工作，Node.js 抽象出操作系统之间的特定差异，并为所有打开的文件分配一个数字型的文件描述符。

// fs.open() 方法用于分配新的文件描述符。
//    一旦被分配，则文件描述符可用于从文件读取数据、
//     向文件写入数据、或请求关于文件的信息。



// fs.open() 是 Node.js 中用于打开文件的方法之一。它的作用是打开一个文件，并返回一个文件描述符（File Descriptor）。

// fs.open(path, flags[, mode], callback)
// path: 要打开的文件的路径。  要用绝对路径
// flags: 用于指定文件的打开方式，可以是以下之一：
//   'r': 以读取模式打开文件。如果文件不存在会发生异常。
//   'r+': 以读写模式打开文件。如果文件不存在会发生异常。
//   'rs': 同步模式下以读取模式打开文件，防止对文件的写入缓存。
//   'rs+': 同步模式下以读写模式打开文件，防止对文件的写入缓存。
//   'w': 以写入模式打开文件，文件不存在则创建文件，存在则清空文件。
//   'wx': 类似于 'w'，但是如果文件存在则打开失败。
//   'w+': 以读写模式打开文件，文件不存在则创建文件，存在则清空文件。
//   'wx+': 类似于 'w+'，但是如果文件存在则打开失败。
//   'a': 以追加模式打开文件，如果文件不存在则创建文件。
//   'ax': 类似于 'a'，但是如果文件存在则打开失败。
//   'a+': 以读取追加模式打开文件，如果文件不存在则创建文件。
//   'ax+': 类似于 'a+'，但是如果文件存在则打开失败。
// mode (可选): 用于指定文件的权限，默认为 0o666。
// callback: 回调函数，接受两个参数 (err, fd)，其中 err 是错误对象（如果有的话），fd 是文件描述符。


// 在Node.js中，文件描述符（File Descriptor）是一个非负整数，用于标识一个打开的文件。文件描述符通常由操作系统提供，并在打开文件时分配。在Node.js中，通过fs.open()方法打开文件后，会返回一个文件描述符，用于后续的文件操作。

// 文件描述符的取值范围通常由操作系统决定，但一般情况下：

// 标准输入（stdin）的文件描述符通常是0。
// 标准输出（stdout）的文件描述符通常是1。
// 标准错误输出（stderr）的文件描述符通常是2。
// 其他文件的文件描述符从3开始递增。
// 因此，大多数情况下，文件描述符的取值是从3开始的连续整数。在Node.js中，文件描述符用于进行文件读写等操作。

// 请注意，在文件操作结束后，必须使用 fs.close() 方法关闭文件描述符以释放资源。


const fs = require("fs")
const path = require("path")

fs.open(
  path.resolve(__dirname, "./open.txt"),
  (err, fd) => {
    console.log("fd111", fd)

    fs.fstat(fd, (err, state) => {
      console.log("state222", state)
    })
  }
)