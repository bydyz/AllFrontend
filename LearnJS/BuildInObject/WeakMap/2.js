// 6. 弱引用特性：
// WeakMap 的键是弱引用的，这意味着如果没有其他引用指向键对象，它们可能会被垃圾回收。这有助于避免内存泄漏，因为 WeakMap 不会阻止其键对象被垃圾回收。


// 7. 限制和注意事项：
// WeakMap 的键必须是对象，而值可以是任意类型。
// WeakMap 是不可迭代的，因此没有类似于 Map 的 forEach 方法。
// 由于键是弱引用的，WeakMap 不具备 size 属性和 clear 方法。


// 8. 应用场景：
// WeakMap 通常用于存储对象的私有数据，因为键是弱引用的，不会导致对象无法被垃圾回收。
// WeakMap 不会泄漏信息，因为它不可遍历，外部无法直接获取到内部信息。